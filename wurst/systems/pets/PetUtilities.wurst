package PetUtilities
import ID

public function player.getPet() returns unit
    for u in udg_pets
        if u.getOwner() == this
            return u
    return null

public function unit.getPet() returns unit
    return this.getOwner().getPet()

public function player.releasePets()
    for u in udg_pets
        if u.getOwner() == this
            releasePet(u)

public function releasePet(unit pet)
    if pet != null
        udg_pets.removeUnit(pet)
        pet.setOwner(playerFromIndex(PLAYER_NEUTRAL_AGGRESSIVE), true)
        for itm in pet.inventory()
            pet.dropItemPoint(itm, pet.getPos())
        pet.remove()

public function player.setPet(unit pet)
    this.releasePets()
    udg_pets.addUnit(pet)

public function getCorrespondingHeroPetId(int tamedID) returns int
    switch tamedID
        case UNIT_ELK
            //TODO: Return corresponding pet ID
        case UNIT_JUNGLE_BEAR
            //TODO: Return corresponding pet ID
        case UNIT_JUNGLE_WOLF
            //TODO: Return corresponding pet ID
        case UNIT_HAWK_HATCHLING
            //TODO: Return corresponding pet ID

    return 0

public function getCorrespondingHeroPetId(unit tamed) returns int
    return getCorrespondingHeroPetId(tamed.getTypeId())

public function handleTamePet(player owner, unit u) returns unit
    let petId = getCorrespondingHeroPetId(u)
    if petId != 0
        u.hide()
        let pet = createUnit(owner, petId, u.getPos(), u.getFacingAngle())
        let oldPet = owner.getPet()
        if oldPet != null and oldPet.isType(UNIT_TYPE_HERO)
            pet.setLevel(oldPet.getLevel(), false)
        owner.setPet(pet)
        u.remove()
        return pet
    return null