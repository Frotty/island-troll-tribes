package PetUtilities
import ID
import UnitEntity

public function player.getPet() returns unit
    for u in udg_pets
        if u.getOwner() == this
            return u
    return null

public function unit.getPet() returns unit
    return this.getOwner().getPet()

public function player.releasePets()
    for u in udg_pets
        if u.getOwner() == this
            releasePet(u)

public function releasePet(unit pet)
    if pet != null
        udg_pets.removeUnit(pet)

        //Clear inventory
        for itm in pet.inventory()
            pet.removeItem(itm)

        //Remove unit
        let entity = UnitEntity.findForUnit(pet)
        if entity != null
            destroy entity
        else
            pet.remove()

public function player.setPet(unit pet)
    this.releasePets()
    udg_pets.addUnit(pet)

public function getCorrespondingHeroPetId(int tamedID) returns int
    switch tamedID
        case UNIT_FAWN
            return UNIT_ELK_PET
        case UNIT_BEAR_CUB
            //TODO: Return corresponding pet ID
        case UNIT_WOLF_PUP
            //TODO: Return corresponding pet ID
    return 0

public function getCorrespondingHeroPetId(unit tamed) returns int
    return getCorrespondingHeroPetId(tamed.getTypeId())

public function handleTamePet(player owner, unit u) returns unit
    let petId = getCorrespondingHeroPetId(u)
    if petId == 0
        return null

    u.hide()
    let pet = createUnit(owner, petId, u.getPos(), u.getFacingAngle())
    let oldPet = owner.getPet()
    if oldPet != null and oldPet.isType(UNIT_TYPE_HERO)
        pet.setLevel(oldPet.getLevel(), false)
    owner.setPet(pet)

    //Remove tamed unit
    let entity = UnitEntity.findForUnit(u)
    if entity != null
        destroy entity
    else
        u.remove()

    return pet
