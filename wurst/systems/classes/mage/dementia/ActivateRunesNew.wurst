package ActivateRunesNew
import DarkGateNew
import DementiaRunesNew
import ClosureForGroups
import Orders
import ClosureEvents
import DummyCaster
import LinkedList
import Camera
import SoundUtils
import ClosureTimers

@configurable constant int ABILITY_ID = 'A07B'
@configurable constant int RREQUIREMENT_ABILITY_ID = 'A07D'
@configurable constant real PORTAL_OFFSET = 350
@configurable constant real RUNE_CAST_RADIUS = 350
@configurable constant string SUMMON_EFFECT_PATH = "Abilities\\Spells\\Orc\\AncestralSpirit\\AncestralSpiritCaster.mdl"
@configurable constant SUMMON_SOUND_FX = new SoundDefinition(Sounds.varimathrasReady1, false)

LinkedList<SummonData> summonsList = new LinkedList<SummonData>()

public class SummonData
    LinkedList<RUNE_TYPE> rune_order
    string name
    int orderId
    real cooldown
    int summonUnitID
    construct(RUNE_TYPE r1, RUNE_TYPE r2, RUNE_TYPE r3, RUNE_TYPE r4, RUNE_TYPE r5, string name, int orderId, real cooldown, int summonUnitID)
        rune_order = new LinkedList<RUNE_TYPE>()
        rune_order.push(r1)
        rune_order.push(r2)
        rune_order.push(r3)
        rune_order.push(r4)
        rune_order.push(r5)
        this.name = name
        this.orderId = orderId
        this.cooldown = cooldown
        this.summonUnitID = summonUnitID

function onCast()
    var caster = GetSpellAbilityUnit()
    DementiaRunesInstance runesInstance = getRunesInstance(caster)
    DarkPortalInstance portalInstance = getDementiaGate(caster)

    if runesInstance == null
        return

    if trySummonDemon(caster, runesInstance, portalInstance)
        return
    else
        runesCastSpells(caster, runesInstance)
        return

function runesCastSpells(unit caster, DementiaRunesInstance runesInstance)
    unit target = null
    var owner = caster.getOwner()
    var casterPos = caster.getPos()
    forUnitsInRange(caster.getPos(), RUNE_CAST_RADIUS) t ->
        if t.getOwner().isEnemyOf(owner) and not t.isInvulnerable() and not t.isType(UNIT_TYPE_STRUCTURE) and t.isAlive() and IsUnitVisible(t, owner)
            if (target == null)
                target = t
            else if (target.getPos().distanceToSq(casterPos) > t.getPos().distanceToSq(casterPos))
                target = t

            for r in runesInstance.runes
                DementiaRuneSpell spell = r.getRandomRuneSpellID()
                new DummyCaster().castTarget(owner, spell.spellId, 1, spell.orderId, target, r.pos)
                destroy r

function LinkedList<RUNE_TYPE>.equals(LinkedList<RUNE_TYPE> other) returns boolean
    if other == null or this.size() != other.size()
        return false
    var iter = other.staticItr()
    for elem in this
        var elem2 = iter.next()
        if elem != elem2
            return false
    return true

function RUNE_TYPE.toString() returns string
    if (this == RUNE_TYPE.Ka)
        return "Ka"
    else if (this == RUNE_TYPE.Nel)
        return "Nel"
    else
        return "Lez"

function trySummonDemon(unit caster, DementiaRunesInstance runesInstance, DarkPortalInstance portalInstance) returns bool
    if runesInstance != null
        if portalInstance != null and runesInstance.runes.size() > 0 and caster.hasAbility(RREQUIREMENT_ABILITY_ID)
            if portalInstance.centerPos.toVec2().distanceTo(caster.getPos()) <= portalInstance.portalRadius and runesInstance.runes.size() == 5
                //Have portal, and standing inside portal
                var runeSequence = new LinkedList<RUNE_TYPE>()
                for r in runesInstance.runes
                    runeSequence.push(r.runeType)

                for summonInfo in summonsList
                    if summonInfo.rune_order.equals(runeSequence)
                        var efx = addEffect(SUMMON_EFFECT_PATH, portalInstance.centerPos + vec3(0, 0, 300))
                        efx.setScale(2)
                        doAfter(1.25) ->
                            efx.destr()
                            printTimedToPlayer(GENERAL_COLOR + "You have summoned " + summonInfo.name + GENERAL_COLOR + "!|r", 4, caster.getOwner())
                            portalInstance.summons.push(new Summon(createUnit(caster.getOwner(), summonInfo.summonUnitID, portalInstance.centerPos, angle(-90 * DEGTORAD)), summonInfo.cooldown, summonInfo.orderId))
                            
                            if getCameraTargetPosition().distanceTo(portalInstance.centerPos.toVec2()) < 1300
                                SUMMON_SOUND_FX.play(3)

                        for r in runesInstance.runes
                            destroy r
            
                        return true
    return false

function initSummonsData()
    summonsList.push(new SummonData(RUNE_TYPE.Ka, RUNE_TYPE.Lez, RUNE_TYPE.Ka, RUNE_TYPE.Nel, RUNE_TYPE.Ka, "|c00ff0000Kalezka Nelka|r", Orders.acidbomb, 1, UNIT_LOCUST_FIRE_LORD))
    summonsList.push(new SummonData(RUNE_TYPE.Lez, RUNE_TYPE.Nel, RUNE_TYPE.Lez, RUNE_TYPE.Lez, RUNE_TYPE.Ka, "|c00005a95Leznel Lezlezka|r", Orders.thunderbolt, 1, UNIT_LOCUST_WATER_LORD))
    summonsList.push(new SummonData(RUNE_TYPE.Nel, RUNE_TYPE.Nel, RUNE_TYPE.Ka, RUNE_TYPE.Nel, RUNE_TYPE.Lez, "|c0075f041Nelnelka Nellez|r", Orders.soulburn, 1.5, UNIT_LOCUST_GHOST))
    
init

    initSummonsData()
    registerSpellEffectEvent(ABILITY_ID, () -> onCast())
