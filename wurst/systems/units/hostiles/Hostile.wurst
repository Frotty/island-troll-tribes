package Hostile
import LinkedList
import UnitEntity
import ExpiringRawMeat
import TerrainUtils
import ClosureTimers

let MEAT_OFFSET_DISTANCE = 65.

public function spawnRawMeat(vec2 pos) returns ExpiringRawMeat
    return new ExpiringRawMeat(pos, MEAT_EXPIRATION_DEFAULT_DURATION)

public abstract class Hostile extends UnitEntity
    construct(unit whichUnit)
        super(whichUnit)

    construct(player whichPlayer, vec2 pos)
        super(whichPlayer, pos)

    construct(player whichPlayer, vec2 pos, angle facing)
        super(whichPlayer, pos, facing)

    function getDrops() returns LinkedList<int>
        return new LinkedList<int>()

    function getNumCorpses() returns int
        return 1

    override function postCreate()
        super.postCreate()

    override function onDeath()
        let pos = getPos()
        let numCorpses = (getNumCorpses() * udg_FOOD_FOR_KILL_PROPORTION).round()

        //Find an offset position for the meat so items are separated on drop
        vec2 meatPos
        for angleIndex = 0 to 3
            meatPos = pos.polarOffset((angleIndex * 90.).fromDeg(), MEAT_OFFSET_DISTANCE)
            if meatPos.isTerrainWalkable()
                break
            else if angleIndex == 3
                meatPos = pos

        for i = 1 to numCorpses
            spawnRawMeat(pos)

        let drops = getDrops()
        doAfter(ANIMATION_PERIOD * numCorpses) ->
            if drops.size() != 0
                let dropsIter = drops.iterator()
                doPeriodicallyCounted(ANIMATION_PERIOD, drops.size()) cb ->
                    createItem(dropsIter.next(), pos)
                    if cb.isLast()
                        dropsIter.close()
                        destroy drops
            else
                destroy drops

        super.onDeath()
