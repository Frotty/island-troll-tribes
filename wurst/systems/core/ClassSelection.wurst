package ClassSelection
import Tribe
import LinkedList
import UnitExtensions
import TrollExtensions
import UnitPoolExtensions
import GameConfig
import ClosureTimers
import TimerExtensions
import TimerDialog
import TimerUtils
import HashMap
import RegisterEvents
import GameMode
import Game

let UNIT_TROLL_TOTEM = 'o00H'

let spawns = [
    gg_rct_revive_1,
    gg_rct_revive_2,
    gg_rct_revive_3,
    gg_rct_revive_4,
    gg_rct_revive_5,
    gg_rct_revive_6,
    gg_rct_revive_7,
    gg_rct_revive_8,
    gg_rct_revive_9,
    gg_rct_revive_10,
    gg_rct_revive_11,
    gg_rct_revive_12
]

public class ClassSelector
    static let spawns = new HashMap<unit, thistype>()

    Tribe tribe
    LinkedList<unit> pickers
    rect spawn
    unitpool pool
    unit totem

    static function findByTotem(unit totem) returns thistype
        return spawns.get(totem)

    construct(Tribe _tribe)
        tribe = _tribe
        spawn = tribe.getSpawn()

        initializeTotem()
        initializePool()
        initializePickers()

        spawns.put(totem, this)

    private function initializeTotem()
        let pos = spawn.getCenter()
        let owner = tribe.getMembers().getFirst()
        totem = createUnit(owner, UNIT_TROLL_TOTEM, pos, angle(0))
        ..addUnitToStock(UNIT_HUNTER, 0, 1)
        ..addUnitToStock(UNIT_BEAST_MASTER, 0, 1)
        ..addUnitToStock(UNIT_MAGE, 0, 1)
        ..addUnitToStock(UNIT_PRIEST, 0, 1)
        ..addUnitToStock(UNIT_THIEF, 0, 1)
        ..addUnitToStock(UNIT_SCOUT, 0, 1)
        ..addUnitToStock(UNIT_GATHERER, 0, 1)
        ..addUnitToStock(UNIT_REPICK_TROLL, 4, 4)

    private function initializePool()
        pool = CreateUnitPool()
        let allTrollUnitId = gameConfig.getAllTrollUnitId()
        if gameConfig.isAllTrollEnabled() and allTrollUnitId != 0
            pool.addUnitType(allTrollUnitId, 1)
        else
            pool
            ..addUnitType(UNIT_HUNTER, 1)
            ..addUnitType(UNIT_MAGE, 1)
            ..addUnitType(UNIT_BEAST_MASTER, 1)
            ..addUnitType(UNIT_PRIEST, 1)
            ..addUnitType(UNIT_THIEF, 1)
            ..addUnitType(UNIT_SCOUT, 1)
            ..addUnitType(UNIT_GATHERER, 1)

    private function initializePickers()
        let pos = spawn.getCenter()
        pickers = new LinkedList<unit>
        tribe.getMembers().forEach() member ->
            pickers.push(createUnit(member, UNIT_HERO_PICKER, pos.polarOffset(angle(PI), 1200), angle(0)))
            member.setLumber(3)
            member.panCamToTimed(totem, 0)
            doAfter(0.1) ->
                member.select(totem)

    function endSelection()
        if gameConfig.isStartWithOneFire()
            let owner = tribe.getMembers().getFirst()
            createUnit(owner, UNIT_FIRE, spawn.getCenter(), angle(0))

        tribe.getMembers().forEach() member ->
            var troll = member.getTroll()
            if troll == null
                troll = getRandomTroll(member)
                handleSelection(troll)

            troll
            ..suspendXp(false)
            ..unpause()

        totem.remove()

        pickers.forEach(picker -> picker.remove())
        destroy pickers

    function getRandomTroll(player p) returns unit
        return pool.placeRandomUnit(p, spawn.randomPoint(), angle(0))

    function setClassUnavailable(int which)
        if not gameConfig.isOldRandomEnabled() and gameConfig.getAllTrollUnitId() != 0
            pool.removeUnitType(which)

    function setClassAvailable(int which)
        pool.addUnitType(which, 1.0)

    function handleUnitSold()
        if GetSellingUnit().getTypeId() == UNIT_TROLL_TOTEM
            let sold = GetSoldUnit()
            if sold.getTypeId() == UNIT_REPICK_TROLL
                handleRepick()
            else
                handleSelection(sold)

    function handleSelection(unit troll)
        let owner = troll.getOwner()
        let trollId = troll.getTypeId()

        setClassUnavailable(trollId)
        totem.removeUnitFromStock(trollId)
        udg_trolls.addUnit(troll)
        udg_PUnits[owner.getId()] = troll

        setUpSkillTriggers(troll)
        troll
        ..modifySkillPoints(-1)
        ..suspendXp(true)
        ..pause()
        ..setHeat(gameConfig.getMaxHeat())

        if gameConfig.isStartWithFire()
            troll.addItemById(ITEM_FIRE_KIT)
        if gameConfig.isStartWithSpiritWard()
            troll.addItemById(ITEM_SPIRIT_WARD_KIT)

    function handleRepick()
        let sold = GetSoldUnit()
        let owner = sold.getOwner()
        let troll = owner.getTroll()
        let trollId = troll.getTypeId()

        setClassAvailable(trollId)
        totem.addUnitToStock(trollId, 0, 1)
        udg_trolls.removeUnit(troll)
        udg_PUnits[owner.getId()] = null

        troll.remove()
        sold.remove()

        owner
        ..setGold(0)
        ..setLumber(3)

public function startClassSelection()
    for i = 0 to bj_MAX_PLAYER_SLOTS - 1
        for j = 0 to bj_MAX_PLAYER_SLOTS - 1
            if i != j
                SetPlayerAllianceStateBJ(players[i], players[j], bj_ALLIANCE_UNALLIED)

    let numTribes = gameConfig.getNumTribes()
    for tribeId = 0 to numTribes - 1
        new Tribe(tribeId)

    let maxTribeId = Tribe
        .getTribes()
        .filter(tribe -> not tribe.isDefeated())
        .peek()
        .getId()

    let spawnList = new LinkedList<rect>()

    for i = 0 to maxTribeId
        spawnList.push(spawns[i])

    if gameConfig.isRandomSpawns()
        spawnList.shuffle()

    let spawners = Tribe.getTribes().map() tribe ->
        let spawn = spawnList.get(tribe.getId())
        tribe.setSpawn(spawn)
        return new ClassSelector(tribe)

    var selectionTime = 0

    if not gameConfig.isAllTrollEnabled()
        selectionTime = gameConfig.getSelectionTimeAllowed()
        print(GENERAL_COLOR + "Choose a troll class|r")
        print(GENERAL_COLOR + "You will be appointed a random troll if you do not pick|r")
    
    getTimer()
    ..doAfter(selectionTime.toReal(), -> begin
        spawners.forEach(spawner -> spawner.endSelection())
        gg_trg_boards.execute()
        generateMap()
    end)
    .createTimerDialog()
    ..setTitle("Select Class")
    ..display(true)

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL) ->
        ClassSelector.findByTotem(GetSellingUnit()).handleUnitSold()

    GameMode.onModeSelectionFinish() ->
        startClassSelection()
