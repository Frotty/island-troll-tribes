package VictoryDefeat
import GameConfig
import RegisterEvents
import TrollExtensions
import Tribe
import LinkedList

var gameOver = false

function LinkedList<T>.every<T>(LinkedListPredicate<T> predicate) returns bool
    return this.foldl(true, (elem, value) -> value and predicate.isTrueFor(elem))

function LinkedList<T>.any<T>(LinkedListPredicate<T> predicate) returns bool
    return this.foldl(false, (elem, value) -> value or predicate.isTrueFor(elem))

@Test
function testLinkedListEvery()
    asList(1, 2, 3).every(x -> x < 4).assertTrue()
    asList(1, 2, 3).every(x -> x < 3).assertFalse()

@Test
function testLinkedListAny()
    asList(1, 2, 3).any(x -> x < 4).assertTrue()
    asList(1, 2, 3).any(x -> x > 3).assertFalse()

function isGracePeriod() returns bool
    return gameConfig.isTestModeEnabled() or GRACE_PERIOD_TIMER.getRemaining() > 0

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        if not gameOver and GetDyingUnit().isTroll() and not isGracePeriod()
            Tribe.getTribes()
                .filter(tribe -> not tribe.isDefeated())
                .filter(tribe -> begin
                    return tribe
                        .getMembers()
                        .every(member -> member.getTroll().isAlive())
                end)
                .forEach(tribe -> tribe.wasDefeated())

            let aliveTribes = Tribe.getTribes().filter(tribe -> not tribe.isDefeated())
            if aliveTribes.size() == 1
                gameOver = true
                aliveTribes.getFirst().wasVictorious()
