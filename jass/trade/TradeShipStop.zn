
library TradeShipStop requires PublicLibrary {

  public struct TradeShipStop {
    private static region tradeStops;

    private rect stopAt;
    private thistype nextStop;
    private thistype forkTo;
    private real forkProbability;
    private real pauseTime;

    static method create( rect s, real pauseTime ) -> thistype {
      thistype self = thistype.allocate();
      self.stopAt = s;
      self.nextStop = -1;
      self.forkTo = -1;
      self.forkProbability = 0;
      self.pauseTime = pauseTime;
      RegionAddRect(tradeStops, s);
      return self;
    }

    public static method onInit() {
      tradeStops = CreateRegion();
    }

    public static method getTradeRegion() -> region {
      return tradeStops;
    }

    method containsShip(unit ship) -> boolean {
      return IsWidgetInRect( stopAt, ship );
    }

    method randomNext() -> thistype {
      if ( forkTo < 0 || GetRandomReal(0, 1) > forkProbability ) {
        return nextStop;
      } else {
        return forkTo;
      }
    }

    method getNext() -> thistype {
      return nextStop;
    }

    method getFork() -> thistype {
      return forkTo;
    }

    method hasFork() -> boolean {
      return forkTo > 0;
    }

    method addStop( rect r, real pauseTime ) -> thistype {
      if ( nextStop > 0 ) {
        return nextStop.addStop( r, pauseTime );
      } else {
        nextStop = thistype.create( r, pauseTime );
        return nextStop;
      }
    }

    method addTradeShipStop( thistype next ) -> thistype {
      nextStop = next;
      return this;
    }

    method tail() -> thistype {
      if ( nextStop > 0 ) {
        return nextStop.tail();
      } else {
        return this;
      }
    }

    /*
      we can only add one fork
    */
    method addFork( thistype fork, real probability ) -> thistype {
      if (forkTo > 0) {
        debug BJDebugMsg( "Attempting to add multiple forks to " + I2S( this ) );
      }
      forkTo = fork;
      forkProbability = probability;
      return this;
    }

    method isEndOfRoute() -> boolean {
      return nextStop == -1;
    }

    method getPauseTime() -> real {
      return pauseTime;
    }

    method operator x() -> real {
      return GetRectCenterX( stopAt );
    }

    method operator y() -> real {
      return GetRectCenterY( stopAt );
    }

    method clone() -> thistype {
      thistype copy = thistype.create(stopAt, pauseTime);
      if (nextStop > 0) {
        copy.nextStop = nextStop.clone();
      } else {
        copy.nextStop = -1;
      }
      copy.forkTo = forkTo;
      return copy;
    }

    method reverse() -> thistype {
      thistype head = this;

      if (nextStop > 0) {
        head = nextStop.reverse();
        nextStop.nextStop = this;
      }

      nextStop = -1;
      forkTo = -1;

      return head;
    }
  }
}
